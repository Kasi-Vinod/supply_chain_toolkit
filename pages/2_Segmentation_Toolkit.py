# product_segmentation_app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

# ---------- Helper ----------
def _pct_bins_classifier(pct: float, a_pct: float, b_pct: float) -> str:
    if pct <= a_pct:
        return "A"
    elif pct <= a_pct + b_pct:
        return "B"
    return "C"

def product_segmentation(df: pd.DataFrame, item_col: str, sales_col: str, revenue_col: str,
                         a_pct: float = 70, b_pct: float = 20) -> pd.DataFrame:
    dfp = df[[item_col, sales_col, revenue_col]].copy()
    dfp = dfp.rename(columns={item_col: "Item", sales_col: "SalesQty", revenue_col: "Revenue"})

    dfp["SalesQty"] = pd.to_numeric(dfp["SalesQty"], errors="coerce").fillna(0)
    dfp["Revenue"] = pd.to_numeric(dfp["Revenue"], errors="coerce").fillna(0)

    items = dfp.groupby("Item", as_index=False).agg({"SalesQty": "sum", "Revenue": "sum"})
    items = items.sort_values("SalesQty", ascending=False).reset_index(drop=True)

    total_sales = items["SalesQty"].sum()
    items["CumulPct_Sales"] = np.where(total_sales > 0,
                                       100.0 * items["SalesQty"].cumsum() / total_sales,
                                       0.0)
    items["ABC_Sales"] = items["CumulPct_Sales"].apply(lambda p: _pct_bins_classifier(p, a_pct, b_pct))

    items["CumulPct_Revenue_withinSales"] = 0.0
    items["ABC_Revenue_withinSales"] = "C"
    for grp in ["A", "B", "C"]:
        mask = items["ABC_Sales"] == grp
        sub = items.loc[mask].sort_values("Revenue", ascending=False).copy()
        tot_rev = sub["Revenue"].sum()
        if tot_rev > 0 and len(sub) > 0:
            sub["CumulPct_Revenue_withinSales"] = 100.0 * sub["Revenue"].cumsum() / tot_rev
            sub["ABC_Revenue_withinSales"] = sub["CumulPct_Revenue_withinSales"].apply(
                lambda p: _pct_bins_classifier(p, a_pct, b_pct)
            )
        else:
            sub["CumulPct_Revenue_withinSales"] = 0.0
            sub["ABC_Revenue_withinSales"] = "C"
        items.loc[sub.index, "CumulPct_Revenue_withinSales"] = sub["CumulPct_Revenue_withinSales"]
        items.loc[sub.index, "ABC_Revenue_withinSales"] = sub["ABC_Revenue_withinSales"]

    items["Final_Class"] = items["ABC_Sales"] + "-" + items["ABC_Revenue_withinSales"]
    return items

# ---------- PDF Generator ----------
def create_summary_pdf(summary_df, inputs_dict, figs):
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    story = []

    # Title & Confidential note
    today = datetime.today().strftime("%Y-%m-%d")
    story.append(Paragraph(f"ABC Segmentation Report {today}", styles["Title"]))
    story.append(Paragraph("Generated by Segmentation Toolkit | Confidential", styles["Normal"]))
    story.append(Spacer(1, 12))

    # Summary table
    story.append(Paragraph("Summary", styles["Heading2"]))
    table_data = [summary_df.columns.to_list()] + summary_df.values.tolist()
    table = Table(table_data)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.grey),
        ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
        ("ALIGN", (0, 0), (-1, -1), "CENTER"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("FONTSIZE", (0, 0), (-1, -1), 8),
    ]))
    story.append(table)
    story.append(Spacer(1, 12))

    # Inputs used
    story.append(Paragraph("Inputs Used", styles["Heading2"]))
    inputs_table = [[k, v] for k, v in inputs_dict.items()]
    table2 = Table(inputs_table)
    table2.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("ALIGN", (0, 0), (-1, -1), "LEFT"),
    ]))
    story.append(table2)
    story.append(Spacer(1, 12))

    # Graphs
    story.append(Paragraph("Graphs", styles["Heading2"]))
    for fig in figs:
        img_buf = BytesIO()
        fig.savefig(img_buf, format="png", bbox_inches="tight", dpi=100)
        img_buf.seek(0)
        story.append(Image(img_buf, width=380, height=220))
        story.append(Spacer(1, 6))

    doc.build(story)
    buffer.seek(0)
    return buffer

# ---------- Streamlit UI ----------
st.set_page_config(page_title="Product Segmentation (ABC Analysis)", page_icon="ðŸ“¦", layout="wide")
st.title("ðŸ“¦ Product Segmentation â€” ABC Analysis with Subcategories")

uploaded_file = st.file_uploader("Upload Excel file", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)
    st.subheader("Preview of Uploaded Data")
    st.dataframe(df.head())

    st.sidebar.header("Parameters")
    item_col = st.sidebar.selectbox("Item Column", df.columns, index=0)
    sales_col = st.sidebar.selectbox("Sales Quantity Column", df.columns, index=1)
    revenue_col = st.sidebar.selectbox("Revenue Column", df.columns, index=2)
    a_pct = st.sidebar.slider("A % cutoff", 10, 90, 70, 1)
    b_pct = st.sidebar.slider("B % cutoff", 5, 40, 20, 1)

    if st.button("Run Product Segmentation"):
        result = product_segmentation(df, item_col, sales_col, revenue_col, a_pct, b_pct)

        st.subheader("Segmentation Result (first 20 rows)")
        st.dataframe(result.head(20))

        # Summary
        summary = result["Final_Class"].value_counts().reset_index()
        summary.columns = ["Final_Class", "Count"]
        summary["Percentage"] = (summary["Count"] / summary["Count"].sum() * 100).round(2)

        st.subheader("Summary")
        st.dataframe(summary)

        # Graphs
        figs = []
        fig1, ax1 = plt.subplots()
        summary.plot(kind="bar", x="Final_Class", y="Count", ax=ax1, legend=False)
        ax1.set_title("Distribution of Final Classes")
        st.pyplot(fig1); figs.append(fig1)

        fig2, ax2 = plt.subplots()
        ax2.pie(summary["Count"], labels=summary["Final_Class"], autopct="%1.1f%%")
        ax2.set_title("Final Class Distribution")
        st.pyplot(fig2); figs.append(fig2)

        fig3, ax3 = plt.subplots()
        ax3.scatter(result["SalesQty"], result["Revenue"], c=pd.factorize(result["Final_Class"])[0])
        ax3.set_xlabel("SalesQty"); ax3.set_ylabel("Revenue")
        ax3.set_title("Sales vs Revenue by Class")
        st.pyplot(fig3); figs.append(fig3)

        # PDF export
        inputs_dict = {
            "A % Cutoff": f"{a_pct}%",
            "B % Cutoff": f"{b_pct}%",
            "Total Items": len(result),
        }
        pdf_buf = create_summary_pdf(summary, inputs_dict, figs)
        st.download_button("ðŸ“‘ Download PDF Report (A4)", data=pdf_buf,
                           file_name="ABC_Segmentation_Report.pdf", mime="application/pdf")
